import Cypher from "@neo4j/cypher-builder";
import type { InterfaceEntityAdapter } from "../../../../../schema-model/entity/model-adapters/InterfaceEntityAdapter";
import type { UnionEntityAdapter } from "../../../../../schema-model/entity/model-adapters/UnionEntityAdapter";
import { QueryASTContext } from "../../QueryASTContext";
import type { QueryASTNode } from "../../QueryASTNode";
import type { AggregationField } from "../../fields/aggregation-fields/AggregationField";
import type { Filter } from "../../filters/Filter";
import type { AuthorizationFilters } from "../../filters/authorization-filters/AuthorizationFilters";
import type { Pagination } from "../../pagination/Pagination";
import type { Sort, SortField } from "../../sort/Sort";
import type { OperationTranspileResult } from "../operations";
import { Operation } from "../operations";
import type { CompositeAggregationPartial } from "./CompositeAggregationPartial";
export declare class CompositeAggregationOperation extends Operation {
    private children;
    protected directed: boolean;
    fields: AggregationField[];
    nodeFields: AggregationField[];
    edgeFields: AggregationField[];
    private entity;
    protected authFilters: AuthorizationFilters[];
    protected filters: Filter[];
    protected pagination: Pagination | undefined;
    protected sortFields: Sort[];
    private addWith;
    private aggregationProjectionMap;
    private nodeMap;
    private edgeMap;
    constructor({ compositeEntity, children, directed, }: {
        compositeEntity: InterfaceEntityAdapter | UnionEntityAdapter;
        children: CompositeAggregationPartial[];
        directed?: boolean;
    });
    getChildren(): QueryASTNode[];
    protected getSortFields(context: QueryASTContext, target: Cypher.Variable): SortField[];
    transpile(context: QueryASTContext): OperationTranspileResult;
    setFields(fields: AggregationField[]): void;
    addSort(...sort: Sort[]): void;
    addPagination(pagination: Pagination): void;
    addFilters(...filters: Filter[]): void;
    addAuthFilters(...filter: AuthorizationFilters[]): void;
    setNodeFields(fields: AggregationField[]): void;
    setEdgeFields(fields: AggregationField[]): void;
    protected getPredicates(queryASTContext: QueryASTContext): Cypher.Predicate | undefined;
    protected getAuthFilterPredicate(context: QueryASTContext): Cypher.Predicate[];
    protected addSortToClause(context: QueryASTContext, node: Cypher.Variable, clause: Cypher.With | Cypher.Return): void;
    protected getFieldProjectionClause(target: Cypher.Variable, returnVariable: Cypher.Variable, field: AggregationField): Cypher.Clause;
    private transpileAggregationOperation;
    private createSubqueries;
    private createWithClause;
    private createNestedSubquery;
}
