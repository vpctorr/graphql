import type { FieldDefinitionNode, InputValueDefinitionNode } from "graphql";
import { Argument } from "../argument/Argument";
import { Attribute } from "../attribute/Attribute";
import type { Neo4jGraphQLScalarType } from "../attribute/AttributeType";
import { GraphQLBuiltInScalarType, Neo4jGraphQLSpatialType } from "../attribute/AttributeType";
import type { DefinitionCollection } from "./definition-collection";
export declare function parseAttributeArguments(fieldArgs: readonly InputValueDefinitionNode[], definitionCollection: DefinitionCollection): Argument[];
export declare function parseAttribute(field: FieldDefinitionNode, definitionCollection: DefinitionCollection, definitionFields?: ReadonlyArray<FieldDefinitionNode>): Attribute;
export declare function isEnum(definitionCollection: DefinitionCollection, name: string): boolean;
export declare function isUserScalar(definitionCollection: DefinitionCollection, name: string): boolean;
export declare function isObject(definitionCollection: any, name: string): any;
export declare function isNeo4jGraphQLSpatialType(value: string): value is Neo4jGraphQLSpatialType;
export declare function isScalarType(value: string): value is GraphQLBuiltInScalarType | Neo4jGraphQLScalarType;
