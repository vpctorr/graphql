import type { DirectiveNode } from "graphql";
import type { Directive, InputTypeComposerFieldConfigMapDefinition, ObjectTypeComposerFieldConfigAsObjectDefinition } from "graphql-compose";
import type { Argument } from "../schema-model/argument/Argument";
import type { AttributeAdapter } from "../schema-model/attribute/model-adapters/AttributeAdapter";
import type { InputField } from "../types";
export declare function graphqlArgsToCompose(args: Argument[]): {};
export declare function graphqlDirectivesToCompose(directives: DirectiveNode[]): Directive[];
export declare function attributeAdapterToComposeFields(objectFields: AttributeAdapter[], userDefinedFieldDirectives: Map<string, DirectiveNode[]>): Record<string, ObjectTypeComposerFieldConfigAsObjectDefinition<any, any>>;
export declare function concreteEntityToCreateInputFields(objectFields: AttributeAdapter[], userDefinedFieldDirectives: Map<string, DirectiveNode[]>): Record<string, InputField>;
export declare function concreteEntityToUpdateInputFields(objectFields: AttributeAdapter[], userDefinedFieldDirectives: Map<string, DirectiveNode[]>, additionalFieldsCallbacks?: AdditionalFieldsCallback[]): InputTypeComposerFieldConfigMapDefinition;
export declare function withMathOperators(): AdditionalFieldsCallback;
export declare function withArrayOperators(): AdditionalFieldsCallback;
type AdditionalFieldsCallback = (attribute: AttributeAdapter, fieldDefinition: InputField) => Record<string, InputField> | InputTypeComposerFieldConfigMapDefinition;
export {};
